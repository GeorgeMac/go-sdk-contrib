// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/service/http/client.go

// Package http_service_test is a generated GoMock package.
package http_service_test

import (
	context "context"
	io "io"
	http "net/http"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockiHTTPClient is a mock of iHTTPClient interface.
type MockiHTTPClient struct {
	ctrl     *gomock.Controller
	recorder *MockiHTTPClientMockRecorder
}

// MockiHTTPClientMockRecorder is the mock recorder for MockiHTTPClient.
type MockiHTTPClientMockRecorder struct {
	mock *MockiHTTPClient
}

// NewMockiHTTPClient creates a new mock instance.
func NewMockiHTTPClient(ctrl *gomock.Controller) *MockiHTTPClient {
	mock := &MockiHTTPClient{ctrl: ctrl}
	mock.recorder = &MockiHTTPClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockiHTTPClient) EXPECT() *MockiHTTPClientMockRecorder {
	return m.recorder
}

// Request mocks base method.
func (m *MockiHTTPClient) Request(ctx context.Context, method, url string, body io.Reader) (*http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Request", ctx, method, url, body)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Request indicates an expected call of Request.
func (mr *MockiHTTPClientMockRecorder) Request(ctx, method, url, body interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Request", reflect.TypeOf((*MockiHTTPClient)(nil).Request), ctx, method, url, body)
}
