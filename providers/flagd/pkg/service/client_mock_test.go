// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/service/client.go

// Package service_test is a generated GoMock package.
package service_test

import (
	context "context"
	reflect "reflect"

	connect_go "github.com/bufbuild/connect-go"
	gomock "github.com/golang/mock/gomock"
	service "github.com/open-feature/go-sdk-contrib/providers/flagd/pkg/service"
	schemav1connect "go.buf.build/open-feature/flagd-connect/open-feature/flagd/schema/v1/schemav1connect"
)

// MockiClient is a mock of iClient interface.
type MockiClient struct {
	ctrl     *gomock.Controller
	recorder *MockiClientMockRecorder
}

// MockiClientMockRecorder is the mock recorder for MockiClient.
type MockiClientMockRecorder struct {
	mock *MockiClient
}

// NewMockiClient creates a new mock instance.
func NewMockiClient(ctrl *gomock.Controller) *MockiClient {
	mock := &MockiClient{ctrl: ctrl}
	mock.recorder = &MockiClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockiClient) EXPECT() *MockiClientMockRecorder {
	return m.recorder
}

// Configuration mocks base method.
func (m *MockiClient) Configuration() *service.ServiceConfiguration {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Configuration")
	ret0, _ := ret[0].(*service.ServiceConfiguration)
	return ret0
}

// Configuration indicates an expected call of Configuration.
func (mr *MockiClientMockRecorder) Configuration() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Configuration", reflect.TypeOf((*MockiClient)(nil).Configuration))
}

// Instance mocks base method.
func (m *MockiClient) Instance() schemav1connect.ServiceClient {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Instance")
	ret0, _ := ret[0].(schemav1connect.ServiceClient)
	return ret0
}

// Instance indicates an expected call of Instance.
func (mr *MockiClientMockRecorder) Instance() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Instance", reflect.TypeOf((*MockiClient)(nil).Instance))
}

// MockClientMockTarget is a mock of ClientMockTarget interface.
type MockClientMockTarget struct {
	ctrl     *gomock.Controller
	recorder *MockClientMockTargetMockRecorder
}

// MockClientMockTargetMockRecorder is the mock recorder for MockClientMockTarget.
type MockClientMockTargetMockRecorder struct {
	mock *MockClientMockTarget
}

// NewMockClientMockTarget creates a new mock instance.
func NewMockClientMockTarget(ctrl *gomock.Controller) *MockClientMockTarget {
	mock := &MockClientMockTarget{ctrl: ctrl}
	mock.recorder = &MockClientMockTargetMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClientMockTarget) EXPECT() *MockClientMockTargetMockRecorder {
	return m.recorder
}

// ResolveBoolean mocks base method.
func (m *MockClientMockTarget) ResolveBoolean(arg0 context.Context, arg1 *connect_go.AnyRequest) (any, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ResolveBoolean", arg0, arg1)
	ret0, _ := ret[0].(any)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ResolveBoolean indicates an expected call of ResolveBoolean.
func (mr *MockClientMockTargetMockRecorder) ResolveBoolean(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResolveBoolean", reflect.TypeOf((*MockClientMockTarget)(nil).ResolveBoolean), arg0, arg1)
}

// ResolveFloat mocks base method.
func (m *MockClientMockTarget) ResolveFloat(arg0 context.Context, arg1 *connect_go.AnyRequest) (any, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ResolveFloat", arg0, arg1)
	ret0, _ := ret[0].(any)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ResolveFloat indicates an expected call of ResolveFloat.
func (mr *MockClientMockTargetMockRecorder) ResolveFloat(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResolveFloat", reflect.TypeOf((*MockClientMockTarget)(nil).ResolveFloat), arg0, arg1)
}

// ResolveInt mocks base method.
func (m *MockClientMockTarget) ResolveInt(arg0 context.Context, arg1 *connect_go.AnyRequest) (any, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ResolveInt", arg0, arg1)
	ret0, _ := ret[0].(any)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ResolveInt indicates an expected call of ResolveInt.
func (mr *MockClientMockTargetMockRecorder) ResolveInt(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResolveInt", reflect.TypeOf((*MockClientMockTarget)(nil).ResolveInt), arg0, arg1)
}

// ResolveObject mocks base method.
func (m *MockClientMockTarget) ResolveObject(arg0 context.Context, arg1 *connect_go.AnyRequest) (any, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ResolveObject", arg0, arg1)
	ret0, _ := ret[0].(any)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ResolveObject indicates an expected call of ResolveObject.
func (mr *MockClientMockTargetMockRecorder) ResolveObject(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResolveObject", reflect.TypeOf((*MockClientMockTarget)(nil).ResolveObject), arg0, arg1)
}

// ResolveString mocks base method.
func (m *MockClientMockTarget) ResolveString(arg0 context.Context, arg1 *connect_go.AnyRequest) (any, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ResolveString", arg0, arg1)
	ret0, _ := ret[0].(any)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ResolveString indicates an expected call of ResolveString.
func (mr *MockClientMockTargetMockRecorder) ResolveString(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResolveString", reflect.TypeOf((*MockClientMockTarget)(nil).ResolveString), arg0, arg1)
}
