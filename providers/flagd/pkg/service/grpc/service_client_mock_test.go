// Code generated by MockGen. DO NOT EDIT.
// Source: mockme.go

// Package grpc_service_test is a generated GoMock package.
package grpc_service_test

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	schemav1 "go.buf.build/grpc/go/open-feature/flagd/schema/v1"
	grpc "google.golang.org/grpc"
)

// MockServiceClient is a mock of ServiceClient interface.
type MockServiceClient struct {
	ctrl     *gomock.Controller
	recorder *MockServiceClientMockRecorder
}

// MockServiceClientMockRecorder is the mock recorder for MockServiceClient.
type MockServiceClientMockRecorder struct {
	mock *MockServiceClient
}

// NewMockServiceClient creates a new mock instance.
func NewMockServiceClient(ctrl *gomock.Controller) *MockServiceClient {
	mock := &MockServiceClient{ctrl: ctrl}
	mock.recorder = &MockServiceClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockServiceClient) EXPECT() *MockServiceClientMockRecorder {
	return m.recorder
}

// ResolveBoolean mocks base method.
func (m *MockServiceClient) ResolveBoolean(ctx context.Context, in *schemav1.ResolveBooleanRequest, opts ...grpc.CallOption) (*schemav1.ResolveBooleanResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ResolveBoolean", varargs...)
	ret0, _ := ret[0].(*schemav1.ResolveBooleanResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ResolveBoolean indicates an expected call of ResolveBoolean.
func (mr *MockServiceClientMockRecorder) ResolveBoolean(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResolveBoolean", reflect.TypeOf((*MockServiceClient)(nil).ResolveBoolean), varargs...)
}

// ResolveFloat mocks base method.
func (m *MockServiceClient) ResolveFloat(ctx context.Context, in *schemav1.ResolveFloatRequest, opts ...grpc.CallOption) (*schemav1.ResolveFloatResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ResolveFloat", varargs...)
	ret0, _ := ret[0].(*schemav1.ResolveFloatResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ResolveFloat indicates an expected call of ResolveFloat.
func (mr *MockServiceClientMockRecorder) ResolveFloat(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResolveFloat", reflect.TypeOf((*MockServiceClient)(nil).ResolveFloat), varargs...)
}

// ResolveInt mocks base method.
func (m *MockServiceClient) ResolveInt(ctx context.Context, in *schemav1.ResolveIntRequest, opts ...grpc.CallOption) (*schemav1.ResolveIntResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ResolveInt", varargs...)
	ret0, _ := ret[0].(*schemav1.ResolveIntResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ResolveInt indicates an expected call of ResolveInt.
func (mr *MockServiceClientMockRecorder) ResolveInt(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResolveInt", reflect.TypeOf((*MockServiceClient)(nil).ResolveInt), varargs...)
}

// ResolveObject mocks base method.
func (m *MockServiceClient) ResolveObject(ctx context.Context, in *schemav1.ResolveObjectRequest, opts ...grpc.CallOption) (*schemav1.ResolveObjectResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ResolveObject", varargs...)
	ret0, _ := ret[0].(*schemav1.ResolveObjectResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ResolveObject indicates an expected call of ResolveObject.
func (mr *MockServiceClientMockRecorder) ResolveObject(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResolveObject", reflect.TypeOf((*MockServiceClient)(nil).ResolveObject), varargs...)
}

// ResolveString mocks base method.
func (m *MockServiceClient) ResolveString(ctx context.Context, in *schemav1.ResolveStringRequest, opts ...grpc.CallOption) (*schemav1.ResolveStringResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ResolveString", varargs...)
	ret0, _ := ret[0].(*schemav1.ResolveStringResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ResolveString indicates an expected call of ResolveString.
func (mr *MockServiceClientMockRecorder) ResolveString(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResolveString", reflect.TypeOf((*MockServiceClient)(nil).ResolveString), varargs...)
}
