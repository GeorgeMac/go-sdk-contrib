// Code generated by MockGen. DO NOT EDIT.
// Source: iservice.go

// Package flagd_test is a generated GoMock package.
package flagd_test

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	openfeature "github.com/open-feature/golang-sdk/pkg/openfeature"
	schemav1 "go.buf.build/grpc/go/open-feature/flagd/schema/v1"
)

// MockIService is a mock of IService interface.
type MockIService struct {
	ctrl     *gomock.Controller
	recorder *MockIServiceMockRecorder
}

// MockIServiceMockRecorder is the mock recorder for MockIService.
type MockIServiceMockRecorder struct {
	mock *MockIService
}

// NewMockIService creates a new mock instance.
func NewMockIService(ctrl *gomock.Controller) *MockIService {
	mock := &MockIService{ctrl: ctrl}
	mock.recorder = &MockIServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIService) EXPECT() *MockIServiceMockRecorder {
	return m.recorder
}

// ResolveBoolean mocks base method.
func (m *MockIService) ResolveBoolean(arg0 string, arg1 openfeature.EvaluationContext) (*schemav1.ResolveBooleanResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ResolveBoolean", arg0, arg1)
	ret0, _ := ret[0].(*schemav1.ResolveBooleanResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ResolveBoolean indicates an expected call of ResolveBoolean.
func (mr *MockIServiceMockRecorder) ResolveBoolean(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResolveBoolean", reflect.TypeOf((*MockIService)(nil).ResolveBoolean), arg0, arg1)
}

// ResolveNumber mocks base method.
func (m *MockIService) ResolveNumber(arg0 string, arg1 openfeature.EvaluationContext) (*schemav1.ResolveNumberResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ResolveNumber", arg0, arg1)
	ret0, _ := ret[0].(*schemav1.ResolveNumberResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ResolveNumber indicates an expected call of ResolveNumber.
func (mr *MockIServiceMockRecorder) ResolveNumber(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResolveNumber", reflect.TypeOf((*MockIService)(nil).ResolveNumber), arg0, arg1)
}

// ResolveObject mocks base method.
func (m *MockIService) ResolveObject(arg0 string, arg1 openfeature.EvaluationContext) (*schemav1.ResolveObjectResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ResolveObject", arg0, arg1)
	ret0, _ := ret[0].(*schemav1.ResolveObjectResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ResolveObject indicates an expected call of ResolveObject.
func (mr *MockIServiceMockRecorder) ResolveObject(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResolveObject", reflect.TypeOf((*MockIService)(nil).ResolveObject), arg0, arg1)
}

// ResolveString mocks base method.
func (m *MockIService) ResolveString(arg0 string, arg1 openfeature.EvaluationContext) (*schemav1.ResolveStringResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ResolveString", arg0, arg1)
	ret0, _ := ret[0].(*schemav1.ResolveStringResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ResolveString indicates an expected call of ResolveString.
func (mr *MockIServiceMockRecorder) ResolveString(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResolveString", reflect.TypeOf((*MockIService)(nil).ResolveString), arg0, arg1)
}
